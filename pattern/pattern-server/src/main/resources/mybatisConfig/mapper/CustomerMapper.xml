<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.pattern.server.dao.CustomerDao" >
  <resultMap id="BaseResultMap" type="com.github.pattern.common.domain.Customer" >
    <id column="customer_id" property="customerId" jdbcType="INTEGER" />
    <result column="agent_id" property="agentId" jdbcType="INTEGER" />
    <result column="shop_id" property="shopId" jdbcType="INTEGER" />
    <result column="customer_no" property="customerNo" jdbcType="VARCHAR" />
    <result column="customer_name" property="customerName" jdbcType="VARCHAR" />
    <result column="settlement" property="settlement" jdbcType="BIGINT" />
    <result column="frozen_amount" property="frozenAmount" jdbcType="BIGINT" />
    <result column="amount" property="amount" jdbcType="BIGINT" />
    <result column="cipher" property="cipher" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="payout_way" property="payoutWay" jdbcType="TINYINT" />
    <result column="unfreeze_amount" property="unfreezeAmount" jdbcType="BIGINT" />
    <result column="frozen_amount_sum" property="frozenAmountSum" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    customer_id, agent_id, shop_id, customer_no, customer_name, settlement, frozen_amount, 
    amount, cipher, create_date, update_date, status, payout_way, unfreeze_amount, frozen_amount_sum
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pattern_customer
    where customer_id = #{customerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pattern_customer
    where customer_id = #{customerId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.github.pattern.common.domain.Customer" >
    insert into pattern_customer (customer_id, agent_id, shop_id, 
      customer_no, customer_name, settlement, 
      frozen_amount, amount, cipher, 
      create_date, update_date, status, 
      payout_way, unfreeze_amount, frozen_amount_sum
      )
    values (#{customerId,jdbcType=INTEGER}, #{agentId,jdbcType=INTEGER}, #{shopId,jdbcType=INTEGER}, 
      #{customerNo,jdbcType=VARCHAR}, #{customerName,jdbcType=VARCHAR}, #{settlement,jdbcType=BIGINT}, 
      #{frozenAmount,jdbcType=BIGINT}, #{amount,jdbcType=BIGINT}, #{cipher,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{status,jdbcType=TINYINT}, 
      #{payoutWay,jdbcType=TINYINT}, #{unfreezeAmount,jdbcType=BIGINT}, #{frozenAmountSum,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.github.pattern.common.domain.Customer" >
    insert into pattern_customer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="customerId != null" >
        customer_id,
      </if>
      <if test="agentId != null" >
        agent_id,
      </if>
      <if test="shopId != null" >
        shop_id,
      </if>
      <if test="customerNo != null" >
        customer_no,
      </if>
      <if test="customerName != null" >
        customer_name,
      </if>
      <if test="settlement != null" >
        settlement,
      </if>
      <if test="frozenAmount != null" >
        frozen_amount,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="cipher != null" >
        cipher,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="payoutWay != null" >
        payout_way,
      </if>
      <if test="unfreezeAmount != null" >
        unfreeze_amount,
      </if>
      <if test="frozenAmountSum != null" >
        frozen_amount_sum,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="customerId != null" >
        #{customerId,jdbcType=INTEGER},
      </if>
      <if test="agentId != null" >
        #{agentId,jdbcType=INTEGER},
      </if>
      <if test="shopId != null" >
        #{shopId,jdbcType=INTEGER},
      </if>
      <if test="customerNo != null" >
        #{customerNo,jdbcType=VARCHAR},
      </if>
      <if test="customerName != null" >
        #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="settlement != null" >
        #{settlement,jdbcType=BIGINT},
      </if>
      <if test="frozenAmount != null" >
        #{frozenAmount,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="cipher != null" >
        #{cipher,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="payoutWay != null" >
        #{payoutWay,jdbcType=TINYINT},
      </if>
      <if test="unfreezeAmount != null" >
        #{unfreezeAmount,jdbcType=BIGINT},
      </if>
      <if test="frozenAmountSum != null" >
        #{frozenAmountSum,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.pattern.common.domain.Customer" >
    update pattern_customer
    <set >
      <if test="agentId != null" >
        agent_id = #{agentId,jdbcType=INTEGER},
      </if>
      <if test="shopId != null" >
        shop_id = #{shopId,jdbcType=INTEGER},
      </if>
      <if test="customerNo != null" >
        customer_no = #{customerNo,jdbcType=VARCHAR},
      </if>
      <if test="customerName != null" >
        customer_name = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="settlement != null" >
        settlement = #{settlement,jdbcType=BIGINT},
      </if>
      <if test="frozenAmount != null" >
        frozen_amount = #{frozenAmount,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="cipher != null" >
        cipher = #{cipher,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="payoutWay != null" >
        payout_way = #{payoutWay,jdbcType=TINYINT},
      </if>
      <if test="unfreezeAmount != null" >
        unfreeze_amount = #{unfreezeAmount,jdbcType=BIGINT},
      </if>
      <if test="frozenAmountSum != null" >
        frozen_amount_sum = #{frozenAmountSum,jdbcType=BIGINT},
      </if>
    </set>
    where customer_id = #{customerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.pattern.common.domain.Customer" >
    update pattern_customer
    set agent_id = #{agentId,jdbcType=INTEGER},
      shop_id = #{shopId,jdbcType=INTEGER},
      customer_no = #{customerNo,jdbcType=VARCHAR},
      customer_name = #{customerName,jdbcType=VARCHAR},
      settlement = #{settlement,jdbcType=BIGINT},
      frozen_amount = #{frozenAmount,jdbcType=BIGINT},
      amount = #{amount,jdbcType=BIGINT},
      cipher = #{cipher,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=TINYINT},
      payout_way = #{payoutWay,jdbcType=TINYINT},
      unfreeze_amount = #{unfreezeAmount,jdbcType=BIGINT},
      frozen_amount_sum = #{frozenAmountSum,jdbcType=BIGINT}
    where customer_id = #{customerId,jdbcType=INTEGER}
  </update>
  
  <select id="pageCount" resultType="long" parameterType="map" >
    select 
    	count(*)
    from pattern_customer
    <where>
         <if test="shopId != null">
            and shop_id = #{shopId,jdbcType=INTEGER}
         </if>
         <if test="statusList != null and statusList.size() > 0">
      		and status in
      		<foreach collection="statusList" item="status" index="index" open="(" close=")" separator=",">
	   			#{status,jdbcType=TINYINT}
			</foreach>
      	</if>
      </where>
    
  </select>
  
  <select id="pageList" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from pattern_customer
    <where>
         <if test="shopId != null">
            and shop_id = #{shopId,jdbcType=INTEGER}
         </if>
         <if test="statusList != null and statusList.size() > 0">
      		and status in
      		<foreach collection="statusList" item="status" index="index" open="(" close=")" separator=",">
	   			#{status,jdbcType=TINYINT}
			</foreach>
      	</if>
      </where>
      <if test="start !=null and offset !=null">
        limit #{start}, #{offset}
      </if>
  </select>
  
</mapper>