package com.github.admin.server.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONArray;
import com.github.admin.common.domain.Permission;
import com.github.admin.common.domain.PermissionInfo;
import com.github.admin.common.service.PermissionService;
import com.github.admin.common.vo.PageVo;
import com.github.admin.server.dao.PermissionDao;
import com.github.appmodel.domain.result.ModelResult;
import com.github.appmodel.page.DataPage;

@Service
public class PermissionServiceImpl implements PermissionService {

	private static Logger logger = LoggerFactory.getLogger(PermissionServiceImpl.class);
	
	@Autowired
	private PermissionDao permissionDao;
	
	
	@Override
	public ModelResult<List<Permission>> selectPermissionByUserId(Integer systemId, Integer userId) {
		logger.info("根据systemId = 【{}】，userId = 【{}】查询用户权限！",systemId,userId);
		ModelResult<List<Permission>> modelResult = new ModelResult<List<Permission>>();
		if(systemId == null || userId == null) {
			logger.error("系统对应的systemId或者账号对应的userId为空！");
			modelResult.withError("0","系统ID或者账号ID为空！");
			return modelResult;
		}
		List<Permission> permissions = permissionDao.selectPermissionByUserId(systemId,userId);
		modelResult.setModel(permissions);
		return modelResult;
	}


	@Override
	public ModelResult<PageVo> pagePermissionInfoList(DataPage<PermissionInfo> dataPage) {
		ModelResult<PageVo> modelResult = new ModelResult<PageVo>();
		PageVo pageVo = new PageVo();
		int start = dataPage.getStartIndex();
		int offset = dataPage.getPageSize();
		long totalCount = permissionDao.pagePermissionInfoListCount();
		List<PermissionInfo> result = permissionDao.pagePermissionInfoList(start,offset);
		pageVo.setTotal(totalCount);
		pageVo.setRows(result);
		modelResult.setModel(pageVo);
		return modelResult;
	}


	@Override
	public ModelResult<JSONArray> getTreeByRoleId(Integer roleId) {
		ModelResult<JSONArray> modelResult = new ModelResult<JSONArray>();
		if(roleId == null || roleId == 0) {
			modelResult.withError("0","角色ID为非法参数");
			return modelResult;
		}
		
		return null;
	}


	@Override
	public ModelResult<Permission> selectByPrimaryKey(Integer permissionId) {
		if(permissionId == null || permissionId == 0) {
			modelResult.withError("0","权限ID为非法参数");
			return modelResult;
		}
		return null;
	}


	@Override
	public ModelResult<List<Permission>> selectByParentId(Integer parentId) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ModelResult<Integer> updateByPrimaryKeySelective(Permission permission) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ModelResult<Integer> insertSelective(Permission permission) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ModelResult<JSONArray> getTreeByUserId(Integer userId, Integer userPermissionType) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ModelResult<Integer> deleteByPrimaryKeys(String ids) {
		// TODO Auto-generated method stub
		return null;
	}

}
