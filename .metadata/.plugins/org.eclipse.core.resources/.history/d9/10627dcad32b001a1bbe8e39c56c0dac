package com.github.admin.handle;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.ShiroException;
import org.apache.shiro.authz.AuthorizationException;
import org.apache.shiro.authz.UnauthorizedException;
import org.apache.shiro.session.InvalidSessionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.NoHandlerFoundException;

import com.github.admin.common.exception.AccountNotFoundException;
import com.github.admin.common.utils.ResultUtils;
import com.github.admin.common.utils.ResultVo;
import com.github.admin.utils.SpringWebUtils;
import com.github.appmodel.domain.result.ModelResult;

@RestControllerAdvice
public class GlobalExceptionHandler{

	private final static Logger LOGGER = LoggerFactory.getLogger(GlobalExceptionHandler.class);
	
	@ExceptionHandler(ShiroException.class)
	public Object resolveShiroException() {
		ModelResult<ResultVo> modelResult = new ModelResult<ResultVo>();
		modelResult.withError("403", "您没有权限操作！");
		return ResultUtils.buildResult(modelResult);
	}
	
	@ExceptionHandler(Exception.class)
	public Object resolveException(HttpServletRequest request, HandlerMethod handlerMethod, Throwable exception) {
		LOGGER.info("全局统一异常处理");
		String status = String.valueOf(getStatus(request).value());
		ModelAndView mv = new ModelAndView();
		if(SpringWebUtils.isAjax(handlerMethod)) {
			ModelResult<ResultVo> modelResult = new ModelResult<ResultVo>();
			String msg = "访问出错，无法访问:";
			if(StringUtils.isNotBlank(exception.getMessage())) {
				msg = msg + exception.getMessage();
			}else {
				msg = msg + "系统异常，请与管理员联系！";
			}
			modelResult.withError(status,msg);
			return ResultUtils.buildResult(modelResult);
		}else{
			ModelAndView modelAndView = new ModelAndView();
            modelAndView.setViewName("/error"); 
            modelAndView.addObject("errorMsg",exception.getMessage());
		}
		return mv;
	}

	/**
     * 获取响应状态码
     * @param request
     * @return
     */
    private HttpStatus getStatus(HttpServletRequest request) {
        Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");
        if (statusCode == null) {
            return HttpStatus.INTERNAL_SERVER_ERROR;
        }
        return HttpStatus.valueOf(statusCode);
    }

}
