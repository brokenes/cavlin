package com.github.admin.web.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.admin.client.service.OrganizationServiceClient;
import com.github.admin.common.domain.Organization;
import com.github.admin.common.utils.ResultUtils;
import com.github.admin.common.vo.PageVo;
import com.github.appmodel.domain.result.ModelResult;
import com.github.appmodel.page.DataPage;

import io.swagger.annotations.ApiOperation;

@Controller
@RequestMapping("/manage/organization")
public class OrganizationController {

	@Autowired
	private OrganizationServiceClient organizationServiceClient;
	
	 @ApiOperation("组织首页")
     @RequiresPermissions("admin:organization:read")
     @RequestMapping(value = "/index",method = RequestMethod.GET)
     public String index(){
        return "/manager/organization/index";
     }
	 
	
	@ApiOperation("组织列表")
    @RequiresPermissions("admin:organization:read")
    @RequestMapping(value = "/list",method = RequestMethod.GET)
    @ResponseBody
    public Object list(
            @RequestParam(required = false, defaultValue = "0", value = "offset") int offset,
            @RequestParam(required = false, defaultValue = "10", value = "limit") int limit,
            @RequestParam(required = false, defaultValue = "", value = "search") String search,
            @RequestParam(required = false, value = "sort") String sort,
            @RequestParam(required = false, value = "order") String order) {
        DataPage<Organization> dataPage = new DataPage<Organization>();
        dataPage.setPageSize(limit);
        dataPage.setPageNo(offset/limit+1);
        ModelResult<PageVo> modelResult = organizationServiceClient.pageOrganizationList(dataPage);
        return ResultUtils.buildPageResult(modelResult);
    }
	
	@ApiOperation("增加组织页")
    @RequiresPermissions("admin:organization:create")
    @RequestMapping(value = "/create", method = RequestMethod.GET)
    public String create(){
        return "/manager/organization/create";
    }
	
 	@ApiOperation("增加组织")
    @RequiresPermissions("admin:organization:create")
    @RequestMapping(value = "/create", method = RequestMethod.POST)
    @ResponseBody
    public Object create(Organization organization){
//        ComplexResult result = FluentValidator.checkAll()
//                .on(organization.getName(),new LengthValidator(1,20,"组织名"))
//                .on(organization.getDescription(),new LengthValidator(1,30,"描述"))
//                .doValidate()
//                .result(ResultCollectors.toComplex());
//
//        if (!result.isSuccess()) {
//            return new AdminModel(MsgCode.INVALID_LENGTH,result.getErrors());
//        }
        organization.setParentId(0);
        int count = organizationServiceClient.insertSelective(organization);
        if(count <= 0) {
        	return ResultUtils.toJSONResult(false);
        }
        return ResultUtils.toJSONResult(true);
    }
 	
 	 @ApiOperation("修改组织页")
     @RequiresPermissions("admin:organization:update")
     @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
     public String update(@PathVariable("id") int id, ModelMap modelMap) {
         Organization organization = organizationServiceClient.selectByPrimaryKey(id);
         modelMap.put("organization", organization);
         return "/manager/organization/update";
     }
	
 	 
 	@ApiOperation("修改组织信息")
    @RequiresPermissions("admin:user:update")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.POST)
    @ResponseBody
    public Object update(@PathVariable("id") int id, Organization organization) {
//        ComplexResult result = FluentValidator.checkAll()
//                .on(organization.getName(),new LengthValidator(1,20,"组织名"))
//                .on(organization.getDescription(),new LengthValidator(1,30,"描述"))
//                .doValidate()
//                .result(ResultCollectors.toComplex());
//        if (!result.isSuccess()) {
//            return new AdminModel(MsgCode.INVALID_LENGTH,result.getErrors());
//        }
        organization.setOrganizationId(id);
        int count =  organizationServiceClient.updateByPrimaryKeySelective(organization);
        if(count <= 0) {
        	return ResultUtils.toJSONResult(false);
        }
        return ResultUtils.toJSONResult(true);
    }
 	
 	/**
     * 删除组织
     * @param ids
     * @return
     */
    @ApiOperation("删除组织")
    @RequiresPermissions("admin:organization:delete")
    @RequestMapping(value = "/delete/{ids}",method = RequestMethod.GET)
    @ResponseBody
    public Object delete(@PathVariable("ids") String ids) {
        int count = organizationServiceClient.deleteByPrimaryKeys(ids);
        if(count <= 0) {
        	return ResultUtils.toJSONResult(false);
        }
        return ResultUtils.toJSONResult(true);
    }
}
