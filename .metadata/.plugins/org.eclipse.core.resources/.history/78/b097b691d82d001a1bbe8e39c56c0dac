package com.github.admin.server.service;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONArray;
import com.github.admin.common.constants.Constants;
import com.github.admin.common.domain.Permission;
import com.github.admin.common.domain.PermissionInfo;
import com.github.admin.common.service.PermissionService;
import com.github.admin.common.vo.PageVo;
import com.github.admin.server.dao.PermissionDao;
import com.github.admin.server.dao.RolePermissionDao;
import com.github.admin.server.dao.UserPermissionDao;
import com.github.appmodel.domain.result.ModelResult;
import com.github.appmodel.page.DataPage;

@Service
public class PermissionServiceImpl implements PermissionService {

	private static Logger logger = LoggerFactory.getLogger(PermissionServiceImpl.class);
	
	@Autowired
	private PermissionDao permissionDao;
	@Autowired
	private UserPermissionDao userPermissionDao;
	@Autowired
	private RolePermissionDao rolePermissionDao;
	
	
	@Override
	public ModelResult<List<Permission>> selectPermissionByUserId(Integer systemId, Integer userId) {
		logger.info("根据systemId = 【{}】，userId = 【{}】查询用户权限！",systemId,userId);
		ModelResult<List<Permission>> modelResult = new ModelResult<List<Permission>>();
		if(systemId == null || userId == null) {
			logger.error("系统对应的systemId或者账号对应的userId为空！");
			modelResult.withError("0","系统ID或者账号ID为空！");
			return modelResult;
		}
		List<Permission> permissions = permissionDao.selectPermissionByUserId(systemId,userId);
		modelResult.setModel(permissions);
		return modelResult;
	}


	@Override
	public ModelResult<PageVo> pagePermissionInfoList(DataPage<PermissionInfo> dataPage) {
		ModelResult<PageVo> modelResult = new ModelResult<PageVo>();
		PageVo pageVo = new PageVo();
		int start = dataPage.getStartIndex();
		int offset = dataPage.getPageSize();
		long totalCount = permissionDao.pagePermissionInfoListCount();
		List<PermissionInfo> result = permissionDao.pagePermissionInfoList(start,offset);
		pageVo.setTotal(totalCount);
		pageVo.setRows(result);
		modelResult.setModel(pageVo);
		return modelResult;
	}


	@Override
	public ModelResult<JSONArray> getTreeByRoleId(Integer roleId) {
		ModelResult<JSONArray> modelResult = new ModelResult<JSONArray>();
		if(roleId == null || roleId == 0) {
			modelResult.withError("0","角色ID为非法参数");
			return modelResult;
		}
		
		return null;
	}


	@Override
	public ModelResult<Permission> selectByPrimaryKey(Integer permissionId) {
		ModelResult<Permission> modelResult = new ModelResult<Permission>();
		if(permissionId == null || permissionId == 0) {
			modelResult.withError("0","权限ID为非法参数");
			return modelResult;
		}
		Permission permission = permissionDao.selectByPrimaryKey(permissionId);
		modelResult.setModel(permission);
		return modelResult;
	}


	@Override
	public ModelResult<List<Permission>> selectByParentId(Integer parentId) {
		ModelResult<List<Permission>> modelResult = new ModelResult<List<Permission>>();
		if(parentId == null) {
			modelResult.withError("0","父ID为非法参数");
			return modelResult;
		}
		List<Permission> list = permissionDao.selectByParentId(parentId);
		modelResult.setModel(list);
		return modelResult;
	}


	@Override
	public ModelResult<Integer> updateByPrimaryKeySelective(Permission permission) {
		ModelResult<Integer> modelResult = new ModelResult<Integer>();
		if(permission == null || permission.getPermissionId() == null) {
			modelResult.withError("0","编辑权限输入包含了非法参数");
			return modelResult;
		}
		int result = permissionDao.updateByPrimaryKeySelective(permission);
		if(result > 0) {
			modelResult.setModel(result);
		}else {
			modelResult.withError(Constants.FAIL_MSG_CODE,Constants.UPDATE_FAIL_MSG);
		}
		return modelResult;
	}


	@Override
	public ModelResult<Integer> insertSelective(Permission permission) {
		ModelResult<Integer> modelResult = new ModelResult<Integer>();
		if(permission == null) {
			modelResult.withError("0","添加权限输入包含了非法参数");
			return modelResult;
		}
		int result = permissionDao.insertSelective(permission);
		if(result > 0) {
			modelResult.setModel(result);
		}else {
			modelResult.withError(Constants.FAIL_MSG_CODE,Constants.ADD_FAIL_MSG);
		}
		return modelResult;
	}


	@Override
	public ModelResult<JSONArray> getTreeByUserId(Integer userId, Integer userPermissionType) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	@Transactional
	public ModelResult<Integer> deleteByPrimaryKeys(String ids) {
		ModelResult<Integer> modelResult = new ModelResult<Integer>();
		if(ids == null) {
			modelResult.withError("0","删除权限输入包含了非法参数");
			return modelResult;
		}
		String[] idArray = ids.split("-");
		int result = 0;
		for (String idStr : idArray) {
			if (StringUtils.isBlank(idStr)) {
				continue;
			}
			Integer permissionId = Integer.parseInt(idStr);
			userPermissionDao.deleteByPermissionId(permissionId);
			rolePermissionDao.deleteByPermissionId(permissionId);
			result += permissionDao.deleteByPrimaryKey(permissionId);
		}
		if(result > 0) {
			modelResult.setModel(result);
		}else {
			modelResult.withError(Constants.FAIL_MSG_CODE,Constants.DELETE_FAIL_MSG);
		}
		return modelResult;
	}

}
