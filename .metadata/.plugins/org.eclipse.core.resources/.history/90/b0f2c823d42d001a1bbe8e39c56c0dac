package com.github.admin.web.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.admin.client.service.PermissionServiceClient;
import com.github.admin.client.service.SystemServiceClient;
import com.github.admin.common.domain.Permission;
import com.github.admin.common.domain.PermissionInfo;
import com.github.admin.common.domain.System;
import com.github.admin.common.utils.ResultUtils;
import com.github.admin.common.vo.PageVo;
import com.github.appmodel.domain.result.ModelResult;
import com.github.appmodel.page.DataPage;

import io.swagger.annotations.ApiOperation;


@Controller
@RequestMapping("/manage/permission")
public class PermissionController {

		@Autowired
		private PermissionServiceClient permissionServiceClient;
		@Autowired
		private SystemServiceClient systemServiceClient;
	
		
		@ApiOperation("权限首页")
	    @RequiresPermissions("admin:permission:read")
	    @RequestMapping(value = "/index",method = RequestMethod.GET)
	    public String index(ModelMap map){
	        ModelResult<List<System>> modelResult = systemServiceClient.querySystemByStatus(1);
	        if(!modelResult.isSuccess()) {
	        	throw new NullPointerException("查询异常");
	        }
	        List<System> systems = modelResult.getModel();
	        map.put("systems",systems);
	        return "/manager/permission/index";
	    }
		 
		@ApiOperation("权限列表")
	    @RequiresPermissions("admin:permission:read")
	    @RequestMapping(value = "/list",method = RequestMethod.GET)
	    @ResponseBody
	    public Object list(
	            @RequestParam(required = false, defaultValue = "0", value = "offset") int offset,
	            @RequestParam(required = false, defaultValue = "10", value = "limit") int limit,
	            @RequestParam(required = false, defaultValue = "", value = "search") String search,
	            @RequestParam(required = false, value = "sort") String sort,
	            @RequestParam(required = false, value = "order") String order,
	            @RequestParam(required = false,defaultValue = "0",value = "systemId")Integer systemId,
	            @RequestParam(required = false,defaultValue = "0",value = "type")Integer type,
	            @RequestParam(required = false,defaultValue = "-1",value = "parentId")Integer parentId,
	            @RequestParam(required = false,defaultValue = "",value = "name")String name) {
	        DataPage<PermissionInfo> dataPage = new DataPage<PermissionInfo>();
	        dataPage.setPageSize(limit);
	        dataPage.setPageNo(offset/limit+1);//TODO 分页问题
	        DataPage<PermissionInfo> resultData = permissionServiceClient.pagePermissionInfoList(dataPage);
	        ModelResult<PageVo> modelResult = permissionServiceClient.pagePermissionInfoList(dataPage);
	        return ResultUtils.buildPageResult(modelResult);
	        
	    }
		
		@ApiOperation("增加权限页")
	    @RequiresPermissions("admin:permission:create")
	    @RequestMapping(value = "/create", method = RequestMethod.GET)
	    public String create(ModelMap modelMap) {
	        List<System> adminSystems = systemServiceClient.querySystemByStatus(1);
	        modelMap.put("systems", adminSystems);
	        return "/manager/permission/create";
	    }
		 
		
		@ApiOperation("增加权限")
	    @RequiresPermissions("admin:permission:create")
	    @ResponseBody
	    @RequestMapping(value = "/create", method = RequestMethod.POST)
	    public Object create(Permission permission) {
	       /* ComplexResult result = FluentValidator.checkAll()
	                .on(permission.getName(), new LengthValidator(1, 20, "名称"))
	                .doValidate()
	                .result(ResultCollectors.toComplex());
	        if (!result.isSuccess()) {
	            return new AdminModel(MsgCode.INVALID_LENGTH, result.getErrors());
	        }*/
	        int count = permissionServiceClient.insertSelective(permission);
	        if(count <= 0) {
				return ResultUtils.toJSONResult(false);
			}
			return ResultUtils.toJSONResult(true);
	    }
		
		 @ApiOperation("修改权限页")
	     @RequiresPermissions("admin:permission:update")
	     @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
	     public String update(@PathVariable("id") int id, ModelMap modelMap) {
	        List<System> systems = systemServiceClient.querySystemByStatus(1);
	        Permission permission = permissionServiceClient.selectByPrimaryKey(id);
	        modelMap.put("permission", permission);
	        modelMap.put("systems", systems);
	        return "/manager/permission/update";
	     }
		 
		 
		@ApiOperation("修改权限")
	    @RequiresPermissions("admin:permission:update")
	    @RequestMapping(value = "/update/{id}", method = RequestMethod.POST)
	    @ResponseBody
	    public Object update(@PathVariable("id") int id, Permission permission) {
//	        ComplexResult result = FluentValidator.checkAll()
//	                .on(permission.getName(), new LengthValidator(1, 20, "名称"))
//	                .doValidate()
//	                .result(ResultCollectors.toComplex());
//	        if (!result.isSuccess()) {
//	            return new AdminModel(MsgCode.INVALID_LENGTH, result.getErrors());
//	        }
	        List<Permission> list = permissionServiceClient.selectByParentId(id);
	        if(CollectionUtils.isEmpty(list)) {
	        	return ResultUtils.toJSONResult("父菜单不存在", false);
	        }
	       
	        permission.setPermissionId(id);
	        int count = permissionServiceClient.updateByPrimaryKeySelective(permission);
	        if(count <= 0) {
				return ResultUtils.toJSONResult(false);
			}
			return ResultUtils.toJSONResult(true);
	    }
		 
		@ApiOperation("删除权限")
	    @RequiresPermissions("admin:permission:delete")
	    @RequestMapping(value = "/delete/{ids}",method = RequestMethod.GET)
	    @ResponseBody
	    public Object delete(@PathVariable("ids") String ids) {
	        int count = permissionServiceClient.deleteByPrimaryKeys(ids);
	        if(count <= 0) {
				return ResultUtils.toJSONResult(false);
			}
			return ResultUtils.toJSONResult(true);
	    }
		
	 	@ApiOperation("角色权限树")
	    @RequiresPermissions("admin:permission:read")
	    @RequestMapping(value = "/role/{id}", method = RequestMethod.POST)
	    @ResponseBody
	    public Object role(@PathVariable("id") int roleId) {
	        Object obj = permissionServiceClient.getTreeByRoleId(roleId);
	        return obj;
	    }
	 	
	 	 @ApiOperation("修改用户权限")
	     @RequiresPermissions("admin:permission:read")
	     @RequestMapping(value = "/user/{id}/{type}", method = RequestMethod.POST)
	     @ResponseBody
	     public Object user(@PathVariable("id") int id, @PathVariable("type") byte type) {
	         return permissionServiceClient.getTreeByUserId(id, type);
	     }
	 
}
